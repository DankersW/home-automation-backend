package main

import (
	"encoding/json"
	"net/http"
	"time"
)

type ExtWeatherAutoGenerated struct {
	Lat            float64 `json:"lat"`
	Lon            float64 `json:"lon"`
	Timezone       string  `json:"timezone"`
	TimezoneOffset int     `json:"timezone_offset"`
	Current        struct {
		Dt         int     `json:"dt"`
		Sunrise    int     `json:"sunrise"`
		Sunset     int     `json:"sunset"`
		Temp       float64 `json:"temp"`
		FeelsLike  float64 `json:"feels_like"`
		Pressure   int     `json:"pressure"`
		Humidity   int     `json:"humidity"`
		DewPoint   float64 `json:"dew_point"`
		Uvi        float64 `json:"uvi"`
		Clouds     int     `json:"clouds"`
		Visibility int     `json:"visibility"`
		WindSpeed  float64 `json:"wind_speed"`
		WindDeg    int     `json:"wind_deg"`
		Weather    []struct {
			ID          int    `json:"id"`
			Main        string `json:"main"`
			Description string `json:"description"`
			Icon        string `json:"icon"`
		} `json:"weather"`
	} `json:"current"`
}

func exe_http_api(url string, target interface{}) error {
	client := http.Client{Timeout: time.Second * 20}
	request, err := client.Get(url)
	if err != nil {
		return err
	}
	defer request.Body.Close()
	return json.NewDecoder(request.Body).Decode(target)
}

func get_external_weather() ExternalWeather {
	open_weather_endpoint := "https://api.openweathermap.org/data/2.5/onecall?lat=57.7089&lon=11.9746&appid=2634af517df0613c4c7f5a9b5150f724&units=metric&exclude=hourly,minutely,daily"

	ext_weather_data := new(ExtWeatherAutoGenerated)
	exe_http_api(open_weather_endpoint, ext_weather_data)
	weather_data := ExternalWeather{}
	weather_data.Temp = ext_weather_data.Current.Temp
	weather_data.FeelsLike = ext_weather_data.Current.FeelsLike
	weather_data.Humidity = ext_weather_data.Current.Humidity
	weather_data.Weather = ext_weather_data.Current.Weather[0].Main
	return weather_data
}
